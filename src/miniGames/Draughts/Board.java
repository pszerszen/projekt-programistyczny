package miniGames.Draughts;

import gameData.DataBase;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JTextArea;

import miniGames.Draughts.Pole.PolePawn;

/**
 * 
 * @author Mateusz
 */
@SuppressWarnings("serial")
public class Board extends javax.swing.JFrame {

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Board.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Board.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Board.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Board.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Board().setVisible(true);
			}
		});
	}

	private String[] ABC = { "A", "B", "C", "D", "E", "F", "G", "H" };
	@SuppressWarnings("rawtypes")
	private HashSet blackBeat;
	private Computer comp;
	private boolean isDrawn = false;
	private boolean isWhite = true;
	private boolean isWinner = false;
	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JCheckBox jCheckBox1;
	private javax.swing.JCheckBox jCheckBox3;

	private javax.swing.JLabel jLabel1;

	private javax.swing.JLabel jLabel10;

	private javax.swing.JLabel jLabel11;

	private javax.swing.JLabel jLabel12;

	private javax.swing.JLabel jLabel13;

	private javax.swing.JLabel jLabel14;

	private javax.swing.JLabel jLabel15;

	private javax.swing.JLabel jLabel16;

	private javax.swing.JLabel jLabel17;

	private javax.swing.JLabel jLabel18;

	private javax.swing.JLabel jLabel19;

	private javax.swing.JLabel jLabel2;

	private javax.swing.JLabel jLabel20;

	private javax.swing.JLabel jLabel21;

	private javax.swing.JLabel jLabel22;

	private javax.swing.JLabel jLabel23;

	private javax.swing.JLabel jLabel3;

	private javax.swing.JLabel jLabel4;

	private javax.swing.JLabel jLabel5;

	private javax.swing.JLabel jLabel6;

	private javax.swing.JLabel jLabel7;

	private javax.swing.JLabel jLabel8;

	private javax.swing.JLabel jLabel9;

	private javax.swing.JPanel jPanel1;

	private javax.swing.JPanel jPanel2;

	private javax.swing.JPanel jPanel3;

	private javax.swing.JScrollPane jScrollPane1;

	private boolean playerRound = true;

	private Pole[][] Poles;

	private JTextArea textArea;

	private Thread timeRef;

	@SuppressWarnings("rawtypes")
	private HashSet whiteBeat;

	private boolean Winner = false;

	/**
	 * Creates new form Board
	 */
	@SuppressWarnings("rawtypes")
	public Board() {
		whiteBeat = new HashSet();
		blackBeat = new HashSet();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jPanel3 = new javax.swing.JPanel();
		jLabel8 = new javax.swing.JLabel();
		jLabel9 = new javax.swing.JLabel();
		jLabel10 = new javax.swing.JLabel();
		jLabel11 = new javax.swing.JLabel();
		jLabel12 = new javax.swing.JLabel();
		jLabel13 = new javax.swing.JLabel();
		jLabel14 = new javax.swing.JLabel();
		jLabel15 = new javax.swing.JLabel();
		jLabel16 = new javax.swing.JLabel();
		jLabel17 = new javax.swing.JLabel();
		jLabel18 = new javax.swing.JLabel();
		jLabel19 = new javax.swing.JLabel();
		jLabel20 = new javax.swing.JLabel();
		jLabel21 = new javax.swing.JLabel();
		jLabel22 = new javax.swing.JLabel();
		jLabel23 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		textArea = new JTextArea(10, 20);
		textArea.setEditable(false);

		jButton1 = new javax.swing.JButton();
		jButton1.setEnabled(false);

		jButton2 = new javax.swing.JButton();
		jButton2.setEnabled(false);

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane(textArea);
		jCheckBox1 = new javax.swing.JCheckBox();
		jCheckBox3 = new javax.swing.JCheckBox();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

		jPanel1.setBackground(new java.awt.Color(102, 0, 0));
		jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(
				0, 0, 0), 3, true));

		jPanel3.setLayout(new java.awt.GridLayout(8, 8));

		jLabel8.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel8.setForeground(new java.awt.Color(255, 255, 255));
		jLabel8.setText("A");

		jLabel9.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel9.setForeground(new java.awt.Color(255, 255, 255));
		jLabel9.setText("B");

		jLabel10.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel10.setForeground(new java.awt.Color(255, 255, 255));
		jLabel10.setText("C");

		jLabel11.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel11.setForeground(new java.awt.Color(255, 255, 255));
		jLabel11.setText("D");

		jLabel12.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel12.setForeground(new java.awt.Color(255, 255, 255));
		jLabel12.setText("E");

		jLabel13.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel13.setForeground(new java.awt.Color(255, 255, 255));
		jLabel13.setText("F");

		jLabel14.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel14.setForeground(new java.awt.Color(255, 255, 255));
		jLabel14.setText("G");

		jLabel15.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel15.setForeground(new java.awt.Color(255, 255, 255));
		jLabel15.setText("H");

		jLabel16.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel16.setForeground(new java.awt.Color(255, 255, 255));
		jLabel16.setText("1");

		jLabel17.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel17.setForeground(new java.awt.Color(255, 255, 255));
		jLabel17.setText("2");

		jLabel18.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel18.setForeground(new java.awt.Color(255, 255, 255));
		jLabel18.setText("3");

		jLabel19.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel19.setForeground(new java.awt.Color(255, 255, 255));
		jLabel19.setText("4");

		jLabel20.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel20.setForeground(new java.awt.Color(255, 255, 255));
		jLabel20.setText("5");

		jLabel21.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel21.setForeground(new java.awt.Color(255, 255, 255));
		jLabel21.setText("6");

		jLabel22.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel22.setForeground(new java.awt.Color(255, 255, 255));
		jLabel22.setText("7");

		jLabel23.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
		jLabel23.setForeground(new java.awt.Color(255, 255, 255));
		jLabel23.setText("8");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabel16)
														.addComponent(jLabel17)
														.addComponent(jLabel18)
														.addComponent(jLabel19)
														.addComponent(jLabel20)
														.addComponent(jLabel21)
														.addComponent(jLabel22)
														.addComponent(jLabel23))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												23, Short.MAX_VALUE)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																false)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addGap(25,
																				25,
																				25)
																		.addComponent(
																				jLabel8)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(
																				jLabel9)
																		.addGap(50,
																				50,
																				50)
																		.addComponent(
																				jLabel10)
																		.addGap(55,
																				55,
																				55)
																		.addComponent(
																				jLabel11)
																		.addGap(48,
																				48,
																				48)
																		.addComponent(
																				jLabel12)
																		.addGap(58,
																				58,
																				58)
																		.addComponent(
																				jLabel13)
																		.addGap(52,
																				52,
																				52)
																		.addComponent(
																				jLabel14)
																		.addGap(55,
																				55,
																				55)
																		.addComponent(
																				jLabel15)
																		.addGap(25,
																				25,
																				25))
														.addComponent(
																jPanel3,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																440,
																Short.MAX_VALUE))
										.addGap(27, 27, 27)));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addGap(30,
																				30,
																				30)
																		.addComponent(
																				jPanel3,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				424,
																				Short.MAX_VALUE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE))
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap(
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(
																				jLabel23)
																		.addGap(45,
																				45,
																				45)
																		// .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		// javax.swing.GroupLayout.DEFAULT_SIZE,
																		// Short.MAX_VALUE)
																		.addComponent(
																				jLabel22)
																		.addGap(46,
																				46,
																				46)
																		.addComponent(
																				jLabel21)
																		.addGap(48,
																				48,
																				48)
																		.addComponent(
																				jLabel20)
																		.addGap(45,
																				45,
																				45)
																		.addComponent(
																				jLabel19)
																		.addGap(46,
																				46,
																				46)
																		.addComponent(
																				jLabel18)
																		.addGap(46,
																				46,
																				46)
																		.addComponent(
																				jLabel17)
																		.addGap(45,
																				45,
																				45)
																		.addComponent(
																				jLabel16)
																		.addGap(30,
																				30,
																				30)))
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel8)
														.addComponent(jLabel9)
														.addComponent(jLabel10)
														.addComponent(jLabel11)
														.addComponent(jLabel12)
														.addComponent(jLabel13)
														.addComponent(jLabel14)
														.addComponent(jLabel15))));

		jButton1.setText("Start");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					jButton1ActionPerformed(evt);
				} catch (IOException ex) {
					Logger.getLogger(Board.class.getName()).log(Level.SEVERE,
							null, ex);
				}
			}
		});

		jButton2.setText("End");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jLabel1.setText("Time:");
		timeRef = new Thread() {
			public void run() {
				while (true) {
					jLabel2.setText(Draughts.getTime());
				}
			}
		};

		jLabel2.setText("00:00:00");

		jLabel3.setText("       ");

		jLabel4.setText("       ");

		jLabel5.setText("Mark:");

		jLabel6.setText("2");

		jLabel7.setText("Moves:");

		jCheckBox1.setText("White");
		jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox1ActionPerformed(evt);
			}
		});

		jCheckBox3.setText("Black");
		jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBox3ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addComponent(
																				jButton1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				72,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				15,
																				Short.MAX_VALUE)
																		.addComponent(
																				jButton2,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				72,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																jPanel2Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								jScrollPane1,
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(
																								jPanel2Layout
																										.createSequentialGroup()
																										.addGap(0,
																												0,
																												Short.MAX_VALUE)
																										.addComponent(
																												jLabel1)))
																		.addGap(26,
																				26,
																				26)
																		.addComponent(
																				jLabel2))
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								false)
																						.addComponent(
																								jLabel3,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								jLabel5,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								jLabel7,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabel4,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								jLabel6,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)))
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jCheckBox3)
																						.addComponent(
																								jCheckBox1))
																		.addGap(0,
																				0,
																				Short.MAX_VALUE)))
										.addContainerGap()));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel1)
														.addComponent(jLabel2))
										.addGap(28, 28, 28)
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel3)
														.addComponent(jLabel4))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel5)
														.addComponent(jLabel6))
										.addGap(18, 18, 18)
										.addComponent(jLabel7)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												255,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(jCheckBox1)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jCheckBox3)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												11, Short.MAX_VALUE)
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jButton1)
														.addComponent(jButton2))
										.addContainerGap()));

		jCheckBox1.getAccessibleContext().setAccessibleName("White");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jPanel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jPanel2,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE).addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jPanel2,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jPanel1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addContainerGap()));

		Poles = new Pole[8][8];

		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {

				Poles[i][j] = new Pole();
				Poles[i][j].setName(ABC[j] + Integer.toString(8 - i));
				Poles[i][j].setXY(j, i);

				if (i % 2 == 0) {
					if (j % 2 == 0) {
						Poles[i][j].setImage(0);
						Poles[i][j].set_isBlack(false);
					} else {
						Poles[i][j].setImage(1);
						Poles[i][j].set_isBlack(true);
						Poles[i][j].getJPole().addMouseListener(
								new java.awt.event.MouseAdapter() {
									public void mouseClicked(
											java.awt.event.MouseEvent evt) {
										try {
											jLabelPawnMouseClicked(evt);
										} catch (IOException ex) {
											Logger.getLogger(
													Board.class.getName()).log(
													Level.SEVERE, null, ex);
										}
									}
								});
					}
				} else {
					if (j % 2 == 0) {
						Poles[i][j].setImage(1);
						Poles[i][j].set_isBlack(true);
						Poles[i][j].getJPole().addMouseListener(
								new java.awt.event.MouseAdapter() {
									public void mouseClicked(
											java.awt.event.MouseEvent evt) {
										try {
											jLabelPawnMouseClicked(evt);
										} catch (IOException ex) {
											Logger.getLogger(
													Board.class.getName()).log(
													Level.SEVERE, null, ex);
										}
									}
								});
					} else {
						Poles[i][j].setImage(0);
						Poles[i][j].set_isBlack(false);
					}
				}
				jPanel3.add(Poles[i][j].getJPole());
			}
		}

		pack();
	}// </editor-fold>

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)
			throws IOException {
		if (Draughts.getStartTime() == 0) {
			Draughts.startTime();
			timeRef.start();
		}

		StartGame();
		jButton1.setEnabled(false);
		jButton2.setEnabled(true);
	}

	@SuppressWarnings("deprecation")
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		Draughts.stopTime();
		timeRef.stop();
		if (!isWinner || !isDrawn)
			makeMark(false);
		this.dispose();
	}

	private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {
		isWhite = true;
		jCheckBox1.setSelected(true);
		jCheckBox3.setEnabled(false);
		jCheckBox1.setEnabled(false);
		jButton1.setEnabled(true);
	}

	private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {
		isWhite = false;
		jCheckBox3.setSelected(true);
		jCheckBox3.setEnabled(false);
		jCheckBox1.setEnabled(false);
		jButton1.setEnabled(true);
	}

	private void jLabelPawnMouseClicked(java.awt.event.MouseEvent evt)
			throws IOException {
		if (playerRound) {
			String[] S = evt.toString().split(" ");
			String PoleName = S[S.length - 1];

			for (int i = 0; i < 8; i++)
				for (int j = 0; j < 8; j++)
					if (Poles[i][j].getJPole().getName().equals(PoleName))
						if (Poles[i][j].getPawn().getColor() != isWhite
								|| (!Poles[i][j].get_isPawn() && Poles[i][j]
										.get_isYellow()))
							Move(Poles[i][j].getXY()[1], Poles[i][j].getXY()[0]);
						else
							Poles[i][j].info();
		}
	}

	private void makeMark(boolean winner) {
		double time = Draughts.getGameTime() / 1000;

		if (!winner && !isDrawn) {
			textArea.append("WINNER: PLAYER\n");
			if (time < 50)
				jLabel6.setText("5.5");
			else if (time < 100)
				jLabel6.setText("5.0");
			else if (time < 200)
				jLabel6.setText("4.5");
			else if (time < 400)
				jLabel6.setText("4.0");
			else if (time < 700)
				jLabel6.setText("3.5");
			else
				jLabel6.setText("3.0");
		} else if (isDrawn) {
			jLabel6.setText("3.0");
			textArea.append("DRAWN\n");
		} else
			textArea.append("WINNER: COMP\n");
		DataBase.setGrade(Double.parseDouble(jLabel6.getText()));
	}

	int whatPawn(int i, int j) {
		if (isWhite) {
			if (i < 3)
				return 3;
			if (i > 4)
				return 2;
		} else {
			if (i < 3)
				return 2;
			if (i > 4)
				return 3;
		}
		return 6;
	}

	@SuppressWarnings("unchecked")
	public void add_blackBeat(Pole P) {
		blackBeat.add(P);
	}

	@SuppressWarnings("unchecked")
	public void add_whiteBeat(Pole P) {
		whiteBeat.add(P);
	}

	public boolean directPawnMove(int a, int b, Pole P2) {

		int x2 = P2.getXY()[0];
		int y2 = P2.getXY()[1];

		x2 = x2 + a;
		y2 = y2 + b;

		if (x2 <= 7 && x2 >= 0 && y2 <= 7 && y2 >= 0) {
			if (Poles[x2][y2].get_isPawn()) {
				if (Poles[x2][y2].getPawn().getColor() != P2.getPawn()
						.getColor()) {
					if ((x2 + a) <= 7 && (x2 + a) >= 0 && (y2 + b) <= 7
							&& (y2 + b) >= 0) {
						if (!Poles[x2 + a][y2 + b].get_isPawn()) {
							return true;
						} else
							return false;
					} else
						return false;
				} else
					return false;
			} else
				return false;
		} else
			return false;
	}

	public boolean directQueenMove(int a, int b, Pole P2) {
		int x2 = P2.getXY()[0];
		int y2 = P2.getXY()[1];
		while (true) {
			x2 = x2 + a;
			y2 = y2 + b;

			if (x2 <= 7 && x2 >= 0 && y2 <= 7 && y2 >= 0) {
				if (Poles[x2][y2].get_isPawn()) {
					if (Poles[x2][y2].getPawn().getColor() != P2.getPawn()
							.getColor()) {
						if ((x2 + a) <= 7 && (x2 + a) >= 0 && (y2 + b) <= 7
								&& (y2 + b) >= 0) {
							if (!Poles[x2 + a][y2 + b].get_isPawn()) {
								return true;
							} else
								return false;
						} else
							return false;
					} else
						return false;
				}
			} else
				return false;
		}
	}

	public boolean drawn() {
		boolean wh = false;
		boolean bl = false;
		boolean beat = false;
		for (int a = 0; a < 8; a++)
			for (int b = 0; b < 8; b++) {
				if (Poles[a][b].getPawn().get_fieldsToBeat().size() > 0)
					beat = true;
			}
		if (!beat)
			if (numberOf("White") < 4 && numberOf("Black") < 4) {
				for (int a = 0; a < 8; a++)
					for (int b = 0; b < 8; b++) {
						if (Poles[a][b].get_isPawn()
								&& Poles[a][b].getPawn().get_isQueen()
								&& Poles[a][b].getPawn().getColor())
							bl = true;
						if (Poles[a][b].get_isPawn()
								&& Poles[a][b].getPawn().get_isQueen()
								&& !Poles[a][b].getPawn().getColor())
							wh = true;
					}
				if (bl && wh) {
					isDrawn = true;
					return true;
				}
			}
		return false;
	}

	public boolean exist(String S) {
		updateBoard();
		for (int a = 0; a < 8; a++)
			for (int b = 0; b < 8; b++)
				if (Poles[a][b].get_isPawn()
						&& ((Poles[a][b].getPawn().getColor() && S
								.equals("Black")) || (!Poles[a][b].getPawn()
								.getColor() && S.equals("White")))) {
					if (Poles[a][b].getPawn().get_canMove().size() > 0)
						return true;
				}
		return false;
	}

	@SuppressWarnings("rawtypes")
	public HashSet get_blackBeat() {
		return blackBeat;
	}

	public Computer get_computer() {
		return comp;
	}

	public boolean get_isWhite() {
		return isWhite;
	}

	public boolean get_isWinner() {
		return isWinner;
	}

	public boolean get_playerRound() {
		return playerRound;
	}

	@SuppressWarnings("rawtypes")
	public HashSet get_whiteBeat() {
		return whiteBeat;
	}

	public boolean get_Winner() {
		return Winner;
	}

	public Pole[][] getPoles() {
		return Poles;
	}

	public void makeCanMoves(Pole P) {

		P.getPawn().get_canMove().clear();
		P.get_fieldsToBeat().clear();
		Pole P2 = new Pole();
		P2.copy(P);
		int x2 = P2.getXY()[1];
		int y2 = P2.getXY()[0];

		if (!P.getPawn().get_isQueen()) {

			boolean b = false;
			P2.setXY(x2, y2);
			if (directPawnMove(1, 1, P2)) {
				b = true;
				P2.copy(P);
				makePawnMove(1, 1, P, P2);
			}
			P2.setXY(x2, y2);
			if (directPawnMove(-1, 1, P2)) {
				b = true;
				P2.copy(P);
				makePawnMove(-1, 1, P, P2);
			}
			P2.setXY(x2, y2);
			if (directPawnMove(1, -1, P2)) {
				b = true;
				P2.copy(P);
				makePawnMove(1, -1, P, P2);
			}
			P2.setXY(x2, y2);
			if (directPawnMove(-1, -1, P2)) {
				b = true;
				P2.copy(P);
				makePawnMove(-1, -1, P, P2);
			}
			if (!b) {
				P2.copy(P);
				makePawnMove(1, 1, P, P2);
				P2.copy(P);
				makePawnMove(-1, 1, P, P2);
				P2.copy(P);
				makePawnMove(1, -1, P, P2);
				P2.copy(P);
				makePawnMove(-1, -1, P, P2);
			}

		} else if (P.getPawn().get_isQueen()) {
			boolean b = false;
			P2.setXY(x2, y2);
			if (directQueenMove(1, 1, P2)) {
				b = true;
				P2.copy(P);
				makeQueenMove(1, 1, P, P2);
			}
			P2.setXY(x2, y2);
			if (directQueenMove(-1, 1, P2)) {
				b = true;
				P2.copy(P);
				makeQueenMove(-1, 1, P, P2);
			}
			P2.setXY(x2, y2);
			if (directQueenMove(1, -1, P2)) {
				b = true;
				P2.copy(P);
				makeQueenMove(1, -1, P, P2);
			}
			P2.setXY(x2, y2);
			if (directQueenMove(-1, -1, P2)) {
				b = true;
				P2.copy(P);
				makeQueenMove(-1, -1, P, P2);
			}
			if (!b) {
				P2.copy(P);
				makeQueenMove(1, 1, P, P2);
				P2.copy(P);
				makeQueenMove(-1, 1, P, P2);
				P2.copy(P);
				makeQueenMove(1, -1, P, P2);
				P2.copy(P);
				makeQueenMove(-1, -1, P, P2);
			}

		}
	}

	public void makeMove(int i, int j) {

		for (int k = 0; k < 8; k++)
			for (int l = 0; l < 8; l++)
				if (Poles[k][l].get_isPawn() && Poles[k][l].get_isYellow()) {
					int n = Poles[k][l].getNumberOfImage();
					boolean q = Poles[k][l].getPawn().get_isQueen();

					Poles[k][l].setImage(1);
					Poles[k][l].set_isPawn(false);

					Poles[i][j].set_isPawn(true);

					if (Poles[k][l].getPawn().getColor()) {
						if ((i != 7 && !playerRound) || (i != 0 && playerRound)) {
							Poles[i][j].setImage(n);
							Poles[i][j].getPawn().setColor(true);
							Poles[i][j].getPawn().set_isQueen(q);
						} else {
							Poles[i][j].setImage(5);
							Poles[i][j].getPawn().setColor(true);
							Poles[i][j].getPawn().set_isQueen(true);
						}
					} else {
						if ((i != 7 && !playerRound) || (i != 0 && playerRound)) {
							Poles[i][j].setImage(n);
							Poles[i][j].getPawn().setColor(false);
							Poles[i][j].getPawn().set_isQueen(q);
						} else {
							Poles[i][j].setImage(4);
							Poles[i][j].getPawn().setColor(false);
							Poles[i][j].getPawn().set_isQueen(true);
						}
					}

					for (int u = 0; u < Poles[i][j].get_fieldsToBeat().size(); u++)
						if (Poles[i][j].get_fieldsToBeat().get(u).get_Pawn() == Poles[k][l]) {
							Poles[i][j].get_fieldsToBeat().get(u).get_Pole()
									.setImage(1);
							Poles[i][j].set_isPawn(false);
						}
				}

		for (int k = 0; k < 8; k++)
			for (int l = 0; l < 8; l++)
				if (Poles[k][l].get_isBlack() && Poles[k][l].get_isYellow()) {
					Poles[k][l].set_isYellow(false);
					Poles[k][l].getJPole().setBorder(
							new javax.swing.border.LineBorder(
									new java.awt.Color(0, 0, 0), 1, true));
				}
	}

	public void makePawnMove(int a, int b, Pole P, Pole P2) {

		boolean isPlayer;
		if (isWhite == !P.getPawn().getColor())
			isPlayer = true;
		else
			isPlayer = false;

		boolean beat = false;
		int x2, y2, c, d;
		x2 = P2.getXY()[1];
		y2 = P2.getXY()[0];

		while (true) {
			c = x2;
			d = y2;
			P2.setXY(x2, y2);
			if (b > 0) {
				if (y2 < 7)
					y2++;
			} else {
				if (y2 > 0)
					y2--;
			}
			if (a > 0) {
				if (x2 < 7) {
					if (!isPlayer)
						x2++;
					else if (directPawnMove(a, b, P2) || beat)
						x2++;
				}
			} else {
				if (x2 > 0) {
					if (isPlayer)
						x2--;
					else if (directPawnMove(a, b, P2) || beat)
						x2--;
				}
			}

			if (x2 != c && y2 != d) {
				if (!Poles[x2][y2].get_isPawn()) {
					P2.setXY(x2, y2);
					if (beat) {
						for (int i = 0; i < Poles[x2 - a][y2 - b]
								.get_fieldsToBeat().size(); i++)
							if (Poles[x2 - a][y2 - b].get_fieldsToBeat().get(i)
									.get_Pawn() == P)
								Poles[x2][y2].add_fieldToBeat(Poles[x2 - a][y2
										- b].get_fieldsToBeat().get(i));

						if (directPawnMove(-a, b, P2)) {
							P2.setXY(y2, x2);
							makePawnMove(-a, b, P, P2);
						}
						P2.setXY(x2, y2);
						if (directPawnMove(a, -b, P2)) {
							P2.setXY(y2, x2);
							makePawnMove(a, -b, P, P2);
						}
						P2.setXY(x2, y2);
						if (directPawnMove(a, b, P2)) {
							P2.setXY(y2, x2);
							makePawnMove(a, b, P, P2);
						}

						P.getPawn().add_canMovePole(Poles[x2][y2]);
						return;

					} else {
						P.getPawn().add_canMovePole(Poles[x2][y2]);
						return;
					}
				} else if (Poles[x2][y2].getPawn().getColor() != P.getPawn()
						.getColor()) {

					beat = true;

					if (x2 + a <= 7 && x2 + a >= 0 && y2 + b <= 7
							&& y2 + b >= 0) {
						if (!Poles[x2 + a][y2 + b].get_isPawn()) {

							P.getPawn().add_fieldCanBeat(Poles[x2 + a][y2 + b]);
							P.getPawn().add_fieldToBeat(Poles[x2][y2]);

							for (int i = 0; i < Poles[x2 - a][y2 - b]
									.get_fieldsToBeat().size(); i++)
								if (Poles[x2 - a][y2 - b].get_fieldsToBeat()
										.get(i).get_Pawn() == P)
									Poles[x2][y2]
											.add_fieldToBeat(Poles[x2 - a][y2
													- b].get_fieldsToBeat()
													.get(i));

							PolePawn PP = new PolePawn();
							PP.add_PolePawn(Poles[x2][y2], P);
							// PP.setNumber(N);
							Poles[x2][y2].add_fieldToBeat(PP);

						} else
							return;
					} else
						return;
				} else
					return;
			} else
				return;
		}

	}

	public void makeQueenMove(int a, int b, Pole P, Pole P2) {
		boolean beat = false;
		//int N = 0;
		int x2, y2, c, d;
		x2 = P2.getXY()[1];
		y2 = P2.getXY()[0];

		while (true) {
			c = x2;
			d = y2;
			if (a > 0) {
				if (x2 < 7)
					x2++;
			} else {
				if (x2 > 0)
					x2--;
			}
			if (b > 0) {
				if (y2 < 7)
					y2++;
			} else {
				if (y2 > 0)
					y2--;
			}

			if (x2 != c && y2 != d) {
				if (!Poles[x2][y2].get_isPawn()) {
					if (beat) {
						if (!Poles[x2 - a][y2 - b].get_isPawn()) {
							for (int i = 0; i < Poles[x2 - a][y2 - b]
									.get_fieldsToBeat().size(); i++)
								if (Poles[x2 - a][y2 - b].get_fieldsToBeat()
										.get(i).get_Pawn() == P)
									Poles[x2][y2]
											.add_fieldToBeat(Poles[x2 - a][y2
													- b].get_fieldsToBeat()
													.get(i));
						} else {
							for (int i = 0; i < Poles[x2 - a - a][y2 - b - b]
									.get_fieldsToBeat().size(); i++)
								if (Poles[x2 - a - a][y2 - b - b]
										.get_fieldsToBeat().get(i).get_Pawn() == P)
									Poles[x2][y2].add_fieldToBeat(Poles[x2 - a
											- a][y2 - b - b].get_fieldsToBeat()
											.get(i));
							Poles[x2][y2].add_fieldToBeat(Poles[x2 - a][y2 - b]
									.get_fieldsToBeat().get(0));
						}
						boolean t = false;

						P2.setXY(x2, y2);
						if (directQueenMove(-a, b, P2)) {
							t = true;
							P2.setXY(y2, x2);
							makeQueenMove(-a, b, P, P2);
						}
						P2.setXY(x2, y2);
						if (directQueenMove(a, -b, P2)) {
							t = true;
							P2.setXY(y2, x2);
							makeQueenMove(a, -b, P, P2);
						}
						P2.setXY(x2, y2);
						if (t) {
							P.getPawn().add_canMovePole(Poles[x2][y2]);

							Pole P3 = new Pole();
							boolean f = false;
							P3.copy(P2);

							while (true) {
								P3.setXY(P3.getXY()[0] + a, P3.getXY()[1] + b);
								if (P3.getXY()[0] <= 7 && P3.getXY()[0] >= 0
										&& P3.getXY()[1] <= 7
										&& P3.getXY()[1] >= 0) {
									if (!Poles[P3.getXY()[0]][P3.getXY()[1]]
											.get_isPawn()) {
										if (directQueenMove(-a, b, P3))
											f = true;
										if (directQueenMove(a, -b, P3))
											f = true;
									} else
										break;
								} else
									break;
							}
							if (directQueenMove(a, b, P2))
								f = true;
							if (!f)
								return;
						} else
							P.getPawn().add_canMovePole(Poles[x2][y2]);
					} else {
						for (int i = 0; i < Poles[x2 - a][y2 - b]
								.get_fieldsToBeat().size(); i++)
							if (Poles[x2 - a][y2 - b].get_fieldsToBeat().get(i)
									.get_Pawn() == P)
								Poles[x2][y2].add_fieldToBeat(Poles[x2 - a][y2
										- b].get_fieldsToBeat().get(i));
						P.getPawn().add_canMovePole(Poles[x2][y2]);
					}
				} else if (Poles[x2][y2].getPawn().getColor() != P.getPawn()
						.getColor()) {
					beat = true;
					if (x2 + a <= 7 && x2 + a >= 0 && y2 + b <= 7
							&& y2 + b >= 0) {
						if (!Poles[x2 + a][y2 + b].get_isPawn()) {

							P.getPawn().add_fieldCanBeat(Poles[x2 + a][y2 + b]);
							P.getPawn().add_fieldToBeat(Poles[x2][y2]);

							// for(int i=0;
							// i<Poles[x2-a][y2-b].get_fieldsToBeat().size();
							// i++)
							// if(Poles[x2-a][y2-b].get_fieldsToBeat().get(i).get_Pawn()
							// == P)
							// Poles[x2][y2].add_fieldToBeat(Poles[x2-a][y2-b].get_fieldsToBeat().get(i));

							PolePawn PP = new PolePawn();
							PP.add_PolePawn(Poles[x2][y2], P);

							Poles[x2][y2].add_fieldToBeat(PP);
						} else
							return;
					} else
						return;
				} else
					return;
			} else
				return;
		}
	}

	public void makeYellow(int i, int j) {
		for (int k = 0; k < 8; k++)
			for (int l = 0; l < 8; l++)
				if (Poles[k][l].get_isBlack() && Poles[k][l].get_isYellow()) {
					Poles[k][l].set_isYellow(false);
					Poles[k][l].getJPole().setBorder(
							new javax.swing.border.LineBorder(
									new java.awt.Color(0, 0, 0), 1, true));
				}

		int s = 0;
		ArrayList<Pole> AL = new ArrayList<>();
		AL.clear();
		int size = Poles[i][j].getPawn().get_canMove().size();
		if (size > 0) {
			for (int k = 0; k < size; k++) {
				if (size(Poles[i][j].getPawn().get_canMove().get(k)
						.get_fieldsToBeat(), Poles[i][j]) > s) {
					AL.clear();
					s = size(Poles[i][j].getPawn().get_canMove().get(k)
							.get_fieldsToBeat(), Poles[i][j]);
					AL.add(Poles[i][j].getPawn().get_canMove().get(k));
				} else if (size(Poles[i][j].getPawn().get_canMove().get(k)
						.get_fieldsToBeat(), Poles[i][j]) == s)
					AL.add(Poles[i][j].getPawn().get_canMove().get(k));
			}
		}
		Poles[i][j].getPawn().set_canMove(AL);
		size = Poles[i][j].getPawn().get_canMove().size();
		if (size > 0) {
			Poles[i][j].getJPole().setBorder(
					new javax.swing.border.LineBorder(new java.awt.Color(233,
							255, 0), 1, true));
			Poles[i][j].set_isYellow(true);
			for (int k = 0; k < AL.size(); k++) {
				Poles[i][j]
						.getPawn()
						.get_canMove()
						.get(k)
						.getJPole()
						.setBorder(
								new javax.swing.border.LineBorder(
										new java.awt.Color(233, 255, 0), 1,
										true));
				Poles[i][j].getPawn().get_canMove().get(k).set_isYellow(true);
			}
		}
	}

	@SuppressWarnings("rawtypes")
	public void Move(int x, int y) throws IOException {

		updateBoard();

		HashSet Beat = new HashSet();
		Pole P = new Pole();

		if (playerRound)
			if (isWhite)
				Beat = whiteBeat;
			else
				Beat = blackBeat;
		else if (isWhite)
			Beat = blackBeat;
		else
			Beat = whiteBeat;

		if (!Poles[x][y].get_isYellow() && Poles[x][y].get_isPawn()) {
			if (Beat.size() > 0) {
				boolean bool = false;
				for (int k = 0; k < 8; k++) {
					if (bool)
						break;
					for (int l = 0; l < 8; l++) {
						if (Poles[k][l].get_isYellow()) {
							bool = true;
							break;
						}
					}
				}

				if (Beat.contains(Poles[x][y])) {
					if (!bool) {
						Iterator i = Beat.iterator();
						while (i.hasNext()) {
							P = (Pole) i.next();
							Poles[P.getXY()[1]][P.getXY()[0]]
									.getJPole()
									.setBorder(
											new javax.swing.border.LineBorder(
													new java.awt.Color(0, 0, 0),
													1, true));
						}
						makeYellow(x, y);
					}
				} else {
					if (!bool) {
						Iterator i = Beat.iterator();
						while (i.hasNext()) {
							P = (Pole) i.next();
							Poles[P.getXY()[1]][P.getXY()[0]].getJPole()
									.setBorder(
											new javax.swing.border.LineBorder(
													new java.awt.Color(255, 0,
															0), 1, true));
						}
					}
				}
			} else
				makeYellow(x, y);
			comp.setBoard(this);
		} else if (Poles[x][y].get_isYellow() && !Poles[x][y].get_isPawn()) {
			for (int i = 0; i < 8; i++)
				for (int j = 0; j < 8; j++)
					if (Poles[i][j].get_isPawn() && Poles[i][j].get_isYellow()) {
						if (playerRound)
							textArea.append("Player : " + Poles[i][j].getName()
									+ " -> " + Poles[x][y].getName() + "\n");
						else
							textArea.append("Comp : " + Poles[i][j].getName()
									+ " -> " + Poles[x][y].getName() + "\n");
						break;
					}

			makeMove(x, y);
			playerRound = !playerRound;
			if (!playerRound) {
				comp.setBoard(this);
				comp.next();
				updateBoard();
			}
		}
	}

	public int numberOf(String S) {
		int wh = 0;
		int bl = 0;
		for (int a = 0; a < 8; a++)
			for (int b = 0; b < 8; b++)
				if (Poles[a][b].get_isPawn())
					if (Poles[a][b].getPawn().getColor())
						bl++;
					else
						wh++;
		if (S.equals("White"))
			return wh;
		else
			return bl;
	}

	public void set_playerRound(boolean pR) {
		playerRound = pR;
	}

	public int size(ArrayList<PolePawn> _fieldsToBeat, Pole P2) {
		int n = 0;
		for (int i = 0; i < _fieldsToBeat.size(); i++)
			if (_fieldsToBeat.get(i).get_Pawn() == P2)
				n++;
		return n;
	}

	public void StartGame() throws IOException {

		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++) {

				if (i % 2 == 0) {
					if (j % 2 == 1)
						if (whatPawn(i, j) != 6) {
							Poles[i][j].setImage(whatPawn(i, j));
							if (whatPawn(i, j) == 2)
								Poles[i][j].getPawn().setColor(false);
							else
								Poles[i][j].getPawn().setColor(true);
							Poles[i][j].set_isPawn(true);
						}
				} else {
					if (j % 2 == 0)
						if (whatPawn(i, j) != 6) {
							Poles[i][j].setImage(whatPawn(i, j));
							if (whatPawn(i, j) == 2)
								Poles[i][j].getPawn().setColor(false);
							else
								Poles[i][j].getPawn().setColor(true);
							Poles[i][j].set_isPawn(true);
						}
				}
			}

		for (int a = 0; a < 8; a++)
			for (int b = 0; b < 8; b++)
				Poles[a][b].update();

		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++)
				if (Poles[i][j].get_isBlack() && Poles[i][j].get_isPawn())
					makeCanMoves(Poles[i][j]);

		if (isWhite)
			playerRound = true;
		else
			playerRound = false;
		comp = new Computer();
		if (!playerRound) {
			comp.setBoard(this);
			comp.next();
		}
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void updateBoard() {
		for (int a = 0; a < 8; a++)
			for (int b = 0; b < 8; b++) {
				Poles[a][b].update();
			}

		for (int a = 0; a < 8; a++)
			for (int b = 0; b < 8; b++) {
				if (Poles[a][b].get_isPawn())
					makeCanMoves(Poles[a][b]);
			}
		whiteBeat.clear();
		blackBeat.clear();
		boolean bool = false;
		for (int a = 0; a < 8; a++)
			for (int b = 0; b < 8; b++) {
				if (Poles[a][b].get_fieldsToBeat().size() > 0)
					for (int k = 0; k < Poles[a][b].get_fieldsToBeat().size(); k++)
						if (Poles[a][b].get_fieldsToBeat().get(k).get_Pawn()
								.getPawn().getColor()) {
							if (Poles[a][b].get_fieldsToBeat().get(k)
									.get_Pawn().getPawn().get_isQueen()) {
								if (!bool) {
									blackBeat.clear();
									bool = true;
								}
								blackBeat.add(Poles[a][b].get_fieldsToBeat()
										.get(k).get_Pawn());
							} else if (!bool)
								blackBeat.add(Poles[a][b].get_fieldsToBeat()
										.get(k).get_Pawn());
						} else {
							if (Poles[a][b].get_fieldsToBeat().get(k)
									.get_Pawn().getPawn().get_isQueen()) {
								if (!bool) {
									whiteBeat.clear();
									bool = true;
								}
								whiteBeat.add(Poles[a][b].get_fieldsToBeat()
										.get(k).get_Pawn());
							} else if (!bool)
								whiteBeat.add(Poles[a][b].get_fieldsToBeat()
										.get(k).get_Pawn());
						}
			}
		Pole P = new Pole();
		HashSet Beat = new HashSet();
		Iterator it = whiteBeat.iterator();
		int size = 0;
		while (it.hasNext()) {
			P = (Pole) (it.next());
			if (P.getPawn().get_fieldsToBeat().size() > size) {
				Beat.clear();
				Beat.add(P);
				size = (P).getPawn().get_fieldsToBeat().size();
			} else if (P.getPawn().get_fieldsToBeat().size() == size)
				Beat.add(P);
			whiteBeat = Beat;

		}
		Beat = new HashSet();
		it = blackBeat.iterator();
		size = 0;
		while (it.hasNext()) {
			P = (Pole) (it.next());
			if (P.getPawn().get_fieldsToBeat().size() > size) {
				Beat.clear();
				Beat.add(P);
				size = (P.getPawn().get_fieldsToBeat().size());
			} else if (P.getPawn().get_fieldsToBeat().size() == size)
				Beat.add(P);
			blackBeat = Beat;
		}
	}

	// End of variables declaration

	@SuppressWarnings("deprecation")
	public void Winner(boolean winner) {
		Draughts.stopTime();
		timeRef.stop();
		if (!isDrawn)
			isWinner = true;
		Winner = winner;
		comp.setBoard(this);
		try {
			comp.write();
		} catch (IOException ex) {
			Logger.getLogger(Board.class.getName()).log(Level.SEVERE, null, ex);
		}
		makeMark(winner);
	}
}
